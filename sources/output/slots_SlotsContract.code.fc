#pragma version =0.4.2;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

slice __tact_verify_address(slice address) inline {
    throw_unless(136, address.slice_bits() == 267);
    var h = address.preload_uint(11);
    throw_unless(136, (h == 1024) | (h == 1279));
    throw_unless(137, h == 1024);
    return address;
}

(slice, slice) __tact_load_address(slice cs) inline {
    slice raw = cs~load_msg_addr();
    return (cs, __tact_verify_address(raw));
}

builder __tact_store_address(builder b, slice address) inline {
    return b.store_slice(__tact_verify_address(address));
}

int __tact_my_balance() inline {
    return pair_first(get_balance());
}

forall X -> X __tact_not_null(X x) inline { throw_if(128, null?(x)); return x; }

global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_context_sys;

(int, slice, int, slice) __tact_context_get() inline { return __tact_context; }

global int __tact_randomized;
() __tact_prepare_random() impure inline {
    if (null?(__tact_randomized)) {
        randomize_lt();
        __tact_randomized = true;
    }
}

builder __tact_store_bool(builder b, int v) inline {
    b = b.store_int(v, 1);
    return b;
}

int __tact_address_eq(slice a, slice b) inline {
    return equal_slice_bits(a, b);
}

tuple __tact_string_builder_start(builder b) inline {
    return tpush(tpush(empty_tuple(), b), null());
}

tuple __tact_string_builder_start_comment() inline {
    return __tact_string_builder_start(begin_cell().store_uint(0, 32));
}

tuple __tact_string_builder_start_string() inline {
    return __tact_string_builder_start(begin_cell());
}

cell __tact_string_builder_end(tuple builders) inline {
    (builder b, tuple tail) = uncons(builders);
    cell c = b.end_cell();
    while(~ null?(tail)) {
        (b, tail) = uncons(tail);
        c = b.store_ref(c).end_cell();
    }
    return c;
}

slice __tact_string_builder_end_slice(tuple builders) inline {
    return __tact_string_builder_end(builders).begin_parse();
}

((tuple), ()) __tact_string_builder_append(tuple builders, slice sc) inline_ref {
    int sliceRefs = slice_refs(sc);
    int sliceBits = slice_bits(sc);

    while((sliceBits > 0) | (sliceRefs > 0)) {

        ;; Load the current builder
        (builder b, tuple tail) = uncons(builders);
        int remBytes = 127 - (builder_bits(b) / 8);
        int exBytes = sliceBits / 8;

        ;; Append bits
        int amount = min(remBytes, exBytes);
        if (amount > 0) {
            slice read = sc~load_bits(amount * 8);
            b = b.store_slice(read);
        }

        ;; Update builders
        builders = cons(b, tail);

        ;; Check if we need to add a new cell and continue
        if (exBytes - amount > 0) {
            var bb = begin_cell();
            builders = cons(bb, builders);
            sliceBits = (exBytes - amount) * 8;
        } elseif (sliceRefs > 0) {
            sc = sc~load_ref().begin_parse();
            sliceRefs = slice_refs(sc);
            sliceBits = slice_bits(sc);
        } else {
            sliceBits = 0;
            sliceRefs = 0;
        }
    }

    return ((builders), ());
}

builder __gen_write_SlotsContract(builder build_0, (slice) v) inline {
    var (v'owner) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    return build_0;
}

(slice, ((slice))) __gen_read_SlotsContract(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    return (sc_0, (v'owner));
}

_ __gen_Context_get_sender((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'sender;
}

(int, int) __gen_Data_to_external(((int, int)) v) inline {
    var (v'minAmount, v'maxAmount) = v; 
    return (v'minAmount, v'maxAmount);
}

(slice, ((slice))) __gen_read_$init$SlotsContract(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    return (sc_0, (v'owner));
}

(slice) $__gen_SlotsContract_init(slice $owner) impure inline_ref {
    var (($self'owner)) = (null());
    $self'owner = $owner;
    return ($self'owner);
}

(slice) __gen_load_SlotsContract() impure inline {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~__gen_read_SlotsContract();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice owner) = $sc~__gen_read_$init$SlotsContract();
        $sc.end_parse();
        return $__gen_SlotsContract_init(owner);
    }
}

() __gen_store_SlotsContract((slice) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = __gen_write_SlotsContract(b, v);
    set_data(b.end_cell());
}

;; String "Withdraw"
slice __gen_str_373638825() asm "B{b5ee9c7241010101000a0000105769746864726177ad26c282} B>boc <s PUSHSLICE";

;; String "You win!"
slice __gen_str_1926654136() asm "B{b5ee9c7241010101000a000010596f752077696e21cd401aa2} B>boc <s PUSHSLICE";

;; String "You lost :("
slice __gen_str_2078206528() asm "B{b5ee9c7241010101000d000016596f75206c6f7374203a28e0efa2fb} B>boc <s PUSHSLICE";

;; String "🍎"
slice __gen_str_141059597() asm "B{b5ee9c72410101010006000008f09f8d8e5d27bd6a} B>boc <s PUSHSLICE";

;; String "🍌"
slice __gen_str_3015971284() asm "B{b5ee9c72410101010006000008f09f8d8caa57868b} B>boc <s PUSHSLICE";

;; String "🍉"
slice __gen_str_2059311348() asm "B{b5ee9c72410101010006000008f09f8d89b64377be} B>boc <s PUSHSLICE";

int $random(int $min, int $max) impure inline_ref {
    __tact_prepare_random();
    return ($min + rand(($max - $min)));
}

() $send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref {
    var (($params'bounce, $params'to, $params'value, $params'mode, $params'body, $params'code, $params'data)) = $params;
    builder $b = begin_cell();
    $b = store_int($b, 1, 2);
    $b = __tact_store_bool($b, $params'bounce);
    $b = store_int($b, 0, 3);
    $b = __tact_store_address($b, $params'to);
    $b = store_coins($b, $params'value);
    $b = store_int($b, 0, ((((1 + 4) + 4) + 64) + 32));
    if (((~ null?($params'code)) | (~ null?($params'data)))) {
        $b = __tact_store_bool($b, true);
        builder $bc = begin_cell();
        $bc = __tact_store_bool($bc, false);
        $bc = __tact_store_bool($bc, false);
        if ((~ null?($params'code))) {
            $bc = __tact_store_bool($bc, true);
            $bc = store_ref($bc, __tact_not_null($params'code));
        } else {
            $bc = __tact_store_bool($bc, false);
        }
        if ((~ null?($params'data))) {
            $bc = __tact_store_bool($bc, true);
            $bc = store_ref($bc, __tact_not_null($params'data));
        } else {
            $bc = __tact_store_bool($bc, false);
        }
        $bc = __tact_store_bool($bc, false);
        $b = __tact_store_bool($b, true);
        $b = store_ref($b, end_cell($bc));
    } else {
        $b = __tact_store_bool($b, false);
    }
    cell $body = $params'body;
    if ((~ null?($body))) {
        $b = __tact_store_bool($b, true);
        $b = store_ref($b, __tact_not_null($body));
    } else {
        $b = __tact_store_bool($b, false);
    }
    cell $c = end_cell($b);
    send_raw_message($c, $params'mode);
}

cell $__gen_String_asComment(slice $self) impure inline_ref {
    var ($self) = $self;
    tuple $b = __tact_string_builder_start_comment();
    $b~__tact_string_builder_append($self);
    return __tact_string_builder_end($b);
}

((slice), slice) $__gen_SlotsContract_getSlotValue((slice) $self, int $number) impure inline_ref {
    var (($self'owner)) = $self;
    if (($number < 10)) {
        return (($self'owner), __gen_str_141059597());
    }
    if ((($number >= 10) & ($number < 20))) {
        return (($self'owner), __gen_str_3015971284());
    }
    if ((($number >= 20) & ($number < 30))) {
        return (($self'owner), __gen_str_2059311348());
    }
    if ((($number >= 30) & ($number < 40))) {
        return (($self'owner), __gen_str_141059597());
    }
    if ((($number >= 40) & ($number < 50))) {
        return (($self'owner), __gen_str_3015971284());
    }
    if ((($number >= 50) & ($number < 60))) {
        return (($self'owner), __gen_str_2059311348());
    }
    if ((($number >= 60) & ($number < 70))) {
        return (($self'owner), __gen_str_141059597());
    }
    if ((($number >= 70) & ($number < 80))) {
        return (($self'owner), __gen_str_3015971284());
    }
    if ((($number >= 80) & ($number < 90))) {
        return (($self'owner), __gen_str_2059311348());
    }
    if (($number >= 90)) {
        return (($self'owner), __gen_str_141059597());
    }
    return (($self'owner), __gen_str_2059311348());
}

((slice), int) $__gen_SlotsContract_getSlotType((slice) $self, int $number) impure inline_ref {
    var (($self'owner)) = $self;
    if (($number < 10)) {
        return (($self'owner), 1);
    }
    if ((($number >= 10) & ($number < 20))) {
        return (($self'owner), 2);
    }
    if ((($number >= 20) & ($number < 30))) {
        return (($self'owner), 3);
    }
    if ((($number >= 30) & ($number < 40))) {
        return (($self'owner), 1);
    }
    if ((($number >= 40) & ($number < 50))) {
        return (($self'owner), 2);
    }
    if ((($number >= 50) & ($number < 60))) {
        return (($self'owner), 3);
    }
    if ((($number >= 60) & ($number < 70))) {
        return (($self'owner), 1);
    }
    if ((($number >= 70) & ($number < 80))) {
        return (($self'owner), 2);
    }
    if ((($number >= 80) & ($number < 90))) {
        return (($self'owner), 3);
    }
    if (($number >= 90)) {
        return (($self'owner), 1);
    }
    return (($self'owner), 3);
}

((int, int)) __gen_constructor_Data$minAmount_maxAmount(int minAmount, int maxAmount) inline {
    return (minAmount, maxAmount);
}

(int, int) $__gen_SlotsContract_get_data((slice) $self) impure inline_ref {
    var (($self'owner)) = $self;
    int $balance = __tact_my_balance();
    return __gen_constructor_Data$minAmount_maxAmount(100000000, ($balance / 2));
}

_ $__gen_get_get_data() method_id(78985) {
    var self = __gen_load_SlotsContract();
    var res = $__gen_SlotsContract_get_data(self);
    return __gen_Data_to_external(res);
}

((int, slice, int, int, cell, cell, cell)) __gen_constructor_SendParameters$to_value_mode_bounce_body(slice to, int value, int mode, int bounce, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

((slice), ()) $__gen_SlotsContract_receive_comment_095190194aee611ce895c5503adf85fd864de7905746142f608d3eb2faad14e4((slice) $self) impure inline {
    var ($self'owner) = $self;
    throw_unless(49280, __tact_address_eq($self'owner, __gen_Context_get_sender(__tact_context_get())));
    $send(__gen_constructor_SendParameters$to_value_mode_bounce_body(__gen_Context_get_sender(__tact_context_get()), 0, (128 + 2), false, $__gen_String_asComment(__gen_str_373638825())));
    return (($self'owner), ());
}

((int, slice, int, int, cell, cell, cell)) __gen_constructor_SendParameters$to_value_bounce_body(slice to, int value, int bounce, cell body) inline {
    return (bounce, to, value, 0, body, null(), null());
}

(((slice)), ()) $__gen_SlotsContract_receive((slice) $self) impure inline {
    var ($self'owner) = $self;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    int $bet = $ctx'value;
    int $balance = __tact_my_balance();
    int $maxBet = ($balance / 2);
    int $minBet = 100000000;
    throw_unless(24690, ($ctx'value < $maxBet));
    throw_unless(8124, ($ctx'value > $minBet));
    int $slot1 = $random(1, 100);
    int $slot2 = $random(1, 100);
    int $slot3 = $random(1, 100);
    tuple $slotValue = __tact_string_builder_start_string();
    $slotValue~__tact_string_builder_append(($self'owner)~$__gen_SlotsContract_getSlotValue($slot1));
    $slotValue~__tact_string_builder_append(($self'owner)~$__gen_SlotsContract_getSlotValue($slot2));
    $slotValue~__tact_string_builder_append(($self'owner)~$__gen_SlotsContract_getSlotValue($slot3));
    int $amount = 0;
    slice $comment = __gen_str_1926654136();
    if (((($self'owner)~$__gen_SlotsContract_getSlotType($slot1) == ($self'owner)~$__gen_SlotsContract_getSlotType($slot2)) == ($self'owner)~$__gen_SlotsContract_getSlotType($slot3))) {
        $amount = ($bet * 2);
    }
    if ((($self'owner)~$__gen_SlotsContract_getSlotType($slot1) == ($self'owner)~$__gen_SlotsContract_getSlotType($slot2))) {
        $amount = (($bet * 15) / 10);
    }
    if ((($self'owner)~$__gen_SlotsContract_getSlotType($slot2) == ($self'owner)~$__gen_SlotsContract_getSlotType($slot3))) {
        $amount = (($bet * 15) / 10);
    }
    if ((($self'owner)~$__gen_SlotsContract_getSlotType($slot1) == ($self'owner)~$__gen_SlotsContract_getSlotType($slot3))) {
        $amount = (($bet * 15) / 10);
    }
    if (($amount == 0)) {
        $amount = ($bet / 10);
        $comment = __gen_str_2078206528();
    }
    $send(__gen_constructor_SendParameters$to_value_bounce_body($ctx'sender, $amount, false, $__gen_String_asComment(__tact_string_builder_end_slice($slotValue))));
    $send(__gen_constructor_SendParameters$to_value_bounce_body($ctx'sender, 10000000, false, $__gen_String_asComment($comment)));
    return (($self'owner), ());
}

((slice), int) __gen_router_SlotsContract((slice) self, int msg_bounced, slice in_msg) impure inline_ref {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~$__gen_SlotsContract_receive();
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "withdraw" message
        if (text_op == 0x095190194aee611ce895c5503adf85fd864de7905746142f608d3eb2faad14e4) {
            self~$__gen_SlotsContract_receive_comment_095190194aee611ce895c5503adf85fd864de7905746142f608d3eb2faad14e4();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = ((msg_flags & 1) == 1 ? true : false);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = __gen_load_SlotsContract();
    
    ;; Handle operation
    int handled = self~__gen_router_SlotsContract(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(handled, 130);
    
    ;; Persist state
    __gen_store_SlotsContract(self);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() {
    return "ipfs://QmVdMiFRr35iUVHPT7p5k7txmmvVfNttqmtBcnWJSziFcY";
}

_ lazy_deployment_completed() {
    return get_data().begin_parse().load_int(1);
}
